<?xml version="1.0" encoding="UTF-8"?><!-- 数据库核心配置文件。主要配置访问映射关系等。未标明可编辑项，请参考修改。 --><beans 	xmlns="http://www.springframework.org/schema/beans" 	xmlns:tx="http://www.springframework.org/schema/tx" 	xmlns:aop="http://www.springframework.org/schema/aop" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xmlns:util="http://www.springframework.org/schema/util"  	xmlns:task="http://www.springframework.org/schema/task"	xmlns:context="http://www.springframework.org/schema/context" 	xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd      http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd     http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-4.2.xsd     http://www.springframework.org/schema/util       http://www.springframework.org/schema/util/spring-util-4.2.xsd 	http://www.springframework.org/schema/task 	http://www.springframework.org/schema/task/spring-task-4.3.xsd     http://www.springframework.org/schema/context 	http://www.springframework.org/schema/context/spring-context-4.2.xsd" >		<!-- 公共配置 -->	<!-- 这里扫描主要指@Service、@Entity等需要数据库支持的类，@Controller注解不可以在这里扫描。 -->	<context:component-scan base-package="com.jees.core.database.support">	</context:component-scan>		<!-- Hibernate配置 -->    <context:property-placeholder location="persistence-mysql.properties" />    <util:properties id="hibernateProperties">		<!-- 根据映射文件同步数据库, 用法和含义参考官方文档。 -->    	<prop key="hibernate.dialect">${hibernate.dialect}</prop>		<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>		<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>		<prop key="hibernate.transaction.factory_class">${hibernate.transaction.factory_class}</prop> 		<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>	</util:properties>         <!-- 将数据库连接源抽象成模版，具体含义请参考Atomikos官方网站。 -->    <bean id="abstractXADS" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close" abstract="true">    	<!-- 这里主要用于MYSQL -->        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>        <!-- 初始连接池数量 -->        <property name="poolSize" value="${ds.pool_size}" />        <!-- 最小池数量 -->        <property name="minPoolSize" value="${ds.min_pool_size}"/>        <!-- 最大池数量 -->        <property name="maxPoolSize" value="${ds.max_pool_size}"/>        <!-- 空闲连接最大存活时间，单位：秒， 0为无限制-->        <property name="maxLifetime" value="${ds.max_lifetime}"/>         <!-- 获取连接失败后，重新获取等待最大时间，单位：秒-->        <property name="borrowConnectionTimeout" value="${ds.borrow_connection_timeout}"/>        <!-- 连接维持时间，单位：毫秒，默认5分钟，超过5分钟，抛出 Resultset is close 的错误.-->        <property name="reapTimeout" value="${ds.reap_timeout}"/>        <!-- 最大闲置时间，超过最小连接池连接的连接将将关闭，单位：秒-->        <property name="maxIdleTime" value="${ds.max_idle_time}"/>        <!-- 连接回收时间，单位：秒-->        <property name="maintenanceInterval" value="${ds.maintenance_interval}" />        <!-- 最大可等待获取连接池的时间，单位：秒-->        <property name="loginTimeout" value="${ds.login_timeout}"/>        <!-- 每次建立连接时会做测试查询，可以用来做预处理或者屏蔽        <property name="testQuery" value="select 1" /> -->    </bean>     	<!-- atomikos事务管理器，一般情况无需修改 -->	<bean id="atomikosTM" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">		<description>UserTransactionManager</description>		<property name="forceShutdown" value="true" />	</bean>	<!-- atomikos事务实现，一般情况无需修改 -->	<bean id="atomikosUT" class="com.atomikos.icatch.jta.UserTransactionImp">		<property name="transactionTimeout" value="300" />	</bean>	<!-- spring jta 事务管理器，一般情况无需修改 -->	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">		<property name="transactionManager" ref="atomikosTM" />		<property name="userTransaction" ref="atomikosUT" />		<property name="allowCustomIsolationLevels" value="true" />	</bean>		<!-- 事务的注解声明，包含@Transactional的注解的类和方法使用事务，一般情况无需修改 -->	<tx:annotation-driven proxy-target-class="true"/>		<!-- 以下为项目配置参考 -->	<context:component-scan base-package="com.jees.demo.*" />	<import resource="jees-database-test.xml"/>	<!-- 数据库池，程序通过关键字sessionFactoryMap获取对应的数据库session。ID为固定值，不可修改。 -->	<!-- 	Example:	dao.executeByHQL( _dbKey, _hql );	-->	<util:map id="sessionFactoryMap" >		<!-- _dbmap_key为查询的数据标识关键字 -->	    <entry key="default" value-ref="defaultSF"/>	</util:map></beans>